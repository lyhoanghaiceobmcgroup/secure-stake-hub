import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Separator } from "@/components/ui/separator";
import { Progress } from "@/components/ui/progress";
import { Checkbox } from "@/components/ui/checkbox";
import { 
  DollarSign, 
  FileText, 
  Shield, 
  Clock, 
  CheckCircle, 
  AlertTriangle,
  Eye,
  Download,
  QrCode,
  Signature,
  Lock,
  ArrowRight,
  Building2,
  TrendingUp
} from "lucide-react";
import { cn } from "@/lib/utils";
import { toast } from "sonner";
import UyTinBadge from "./UyTinBadge";
import LegalDisclaimer, { CompactLegalDisclaimer } from "./LegalDisclaimer";
import InvestmentSuccessScreen from "./InvestmentSuccessScreen";
import PortfolioService from "@/services/portfolioService";

interface InvestmentFlowProps {
  opportunity: {
    id: string;
    companyName: string;
    projectName: string;
    description: string;
    targetRate: number;
    minInvestment: number;
    uyTinScore: number;
    sector: string;
    duration: string;
    documents: string[];
  };
  isOpen: boolean;
  onClose: () => void;
}

type FlowStep = 'amount' | 'risk_acknowledgment' | 'esign' | 'confirmation' | 'completed';

const InvestmentFlow = ({ opportunity, isOpen, onClose }: InvestmentFlowProps) => {
  const [currentStep, setCurrentStep] = useState<FlowStep>('amount');
  const [investmentAmount, setInvestmentAmount] = useState('');
  const [riskAcknowledged, setRiskAcknowledged] = useState(false);
  const [termsAccepted, setTermsAccepted] = useState(false);
  const [eSignCompleted, setESignCompleted] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [transactionId, setTransactionId] = useState('');
  const [cqidNumber, setCqidNumber] = useState('');
  const [showSuccessScreen, setShowSuccessScreen] = useState(false);

  // Mock wallet balance
  const availableBalance = 4000000000;

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND',
      minimumFractionDigits: 0,
    }).format(amount);
  };

  const getStepProgress = () => {
    const steps = ['amount', 'risk_acknowledgment', 'esign', 'confirmation', 'completed'];
    return ((steps.indexOf(currentStep) + 1) / steps.length) * 100;
  };

  const handleAmountSubmit = () => {
    const amount = parseInt(investmentAmount.replace(/[^0-9]/g, ''));
    
    if (!amount || amount < opportunity.minInvestment) {
      toast.error(`S·ªë ti·ªÅn t·ªëi thi·ªÉu l√† ${formatCurrency(opportunity.minInvestment)}`);
      return;
    }
    
    if (amount > availableBalance) {
      toast.error('S·ªë d∆∞ kh√¥ng ƒë·ªß. Vui l√≤ng n·∫°p th√™m ti·ªÅn.');
      return;
    }
    
    setCurrentStep('risk_acknowledgment');
  };

  const handleRiskAcknowledgment = () => {
    if (!riskAcknowledged) {
      toast.error('Vui l√≤ng x√°c nh·∫≠n hi·ªÉu r·ªßi ro ƒë·∫ßu t∆∞');
      return;
    }
    setCurrentStep('esign');
  };

  const handleESign = async () => {
    setIsProcessing(true);
    
    // Simulate eSign process
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    setESignCompleted(true);
    const newTransactionId = `TX${Date.now()}`;
    const newCqidNumber = `${opportunity.companyName.substring(0, 2).toUpperCase()}-${Math.floor(Math.random() * 9000) + 1000}`;
    
    setTransactionId(newTransactionId);
    setCqidNumber(newCqidNumber);
    setCurrentStep('confirmation');
    setIsProcessing(false);
    
    // L∆∞u d·ªØ li·ªáu v√†o Portfolio sau khi k√Ω ƒëi·ªán t·ª≠ th√†nh c√¥ng
    const portfolioService = PortfolioService.getInstance();
    const eSignData = {
      opportunity: {
        id: opportunity.id,
        companyName: opportunity.companyName,
        projectName: opportunity.projectName,
        sector: opportunity.sector,
        targetRate: opportunity.targetRate,
        uyTinScore: opportunity.uyTinScore,
        duration: opportunity.duration
      },
      investmentAmount: parseInt(investmentAmount.replace(/[^0-9]/g, '')) || 0,
      transactionId: newTransactionId,
      contractHash: `0x${Math.random().toString(16).substr(2, 8)}`,
      cqidNumber: newCqidNumber,
      eSignDate: new Date().toISOString().split('T')[0],
      qrCodeUrl: `/qr/${newCqidNumber}`
    };
    
    portfolioService.addInvestmentFromESign(eSignData);
    
    toast.success(
      "üéâ K√Ω ƒëi·ªán t·ª≠ th√†nh c√¥ng!", 
      {
        description: `Th√¥ng tin ƒë·∫ßu t∆∞ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o S·ªï c·ªßa t√¥i. CQƒêƒêT: ${newCqidNumber}`,
        duration: 5000,
      }
    );
  };

  const handleFinalConfirmation = async () => {
    setIsProcessing(true);
    
    // Simulate final processing
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    setCqidNumber(`CQƒêƒêT #${opportunity.id.toUpperCase()}-${Math.floor(Math.random() * 9999)}`);
    setShowSuccessScreen(true);
    setIsProcessing(false);
    
    toast.success('ƒê·∫ßu t∆∞ th√†nh c√¥ng! CQƒêƒêT ƒë√£ ƒë∆∞·ª£c c·∫•p.');
  };

  const resetFlow = () => {
    setCurrentStep('amount');
    setInvestmentAmount('');
    setRiskAcknowledged(false);
    setTermsAccepted(false);
    setESignCompleted(false);
    setIsProcessing(false);
    setTransactionId('');
    setCqidNumber('');
    setShowSuccessScreen(false);
    onClose();
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 'amount':
        return (
          <div className="space-y-6">
            <div className="text-center space-y-2">
              <h3 className="text-lg font-semibold">Nh·∫≠p s·ªë ti·ªÅn g√≥p v·ªën</h3>
              <p className="text-sm text-muted-foreground">
                S·ªë ti·ªÅn s·∫Ω ƒë∆∞·ª£c t·∫°m gi·ªØ cho ƒë·∫øn khi ho√†n t·∫•t eSign
              </p>
            </div>
            
            <div className="space-y-4">
              <div>
                <Label htmlFor="amount">S·ªë ti·ªÅn g√≥p v·ªën (VNƒê)</Label>
                <Input
                  id="amount"
                  placeholder={`T·ªëi thi·ªÉu ${formatCurrency(opportunity.minInvestment)}`}
                  value={investmentAmount}
                  onChange={(e) => setInvestmentAmount(e.target.value)}
                  className="text-lg"
                />
              </div>
              
              <div className="bg-gray-50 rounded-lg p-4 space-y-2">
                <div className="flex justify-between text-sm">
                  <span>S·ªë d∆∞ kh·∫£ d·ª•ng:</span>
                  <span className="font-semibold">{formatCurrency(availableBalance)}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span>M·ª©c g√≥p t·ªëi thi·ªÉu:</span>
                  <span className="font-semibold">{formatCurrency(opportunity.minInvestment)}</span>
                </div>
              </div>
            </div>
            
            <Button onClick={handleAmountSubmit} className="w-full" size="lg">
              Ti·∫øp t·ª•c
              <ArrowRight className="w-4 h-4 ml-2" />
            </Button>
          </div>
        );
        
      case 'risk_acknowledgment':
        return (
          <div className="space-y-6">
            <div className="text-center space-y-2">
              <h3 className="text-lg font-semibold">X√°c nh·∫≠n hi·ªÉu r·ªßi ro</h3>
              <p className="text-sm text-muted-foreground">
                Vui l√≤ng ƒë·ªçc k·ªπ v√† x√°c nh·∫≠n hi·ªÉu r·ªßi ro ƒë·∫ßu t∆∞
              </p>
            </div>
            
            <Alert className="border-yellow-200 bg-yellow-50">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                <div className="space-y-2">
                  <p className="font-medium">Tuy√™n b·ªë r·ªßi ro quan tr·ªçng:</p>
                  <ul className="text-sm space-y-1 list-disc list-inside">
                    <li>ƒê√¢y l√† h√¨nh th·ª©c g√≥p v·ªën ƒë·ªìng h√†nh, kh√¥ng ph·∫£i g·ª≠i ti·∫øt ki·ªám</li>
                    <li>T·ª∑ su·∫•t ph√¢n ph·ªëi ph·ª• thu·ªôc v√†o k·∫øt qu·∫£ kinh doanh th·ª±c t·∫ø</li>
                    <li>C√≥ th·ªÉ m·∫•t m·ªôt ph·∫ßn ho·∫∑c to√†n b·ªô s·ªë ti·ªÅn g√≥p v·ªën</li>
                    <li>Kh√¥ng c√≥ cam k·∫øt l·ª£i nhu·∫≠n c·ªë ƒë·ªãnh</li>
                    <li>Th·ªùi gian ho√†n v·ªën c√≥ th·ªÉ d√†i h∆°n d·ª± ki·∫øn</li>
                  </ul>
                </div>
              </AlertDescription>
            </Alert>
            
            <div className="space-y-4">
              <div className="flex items-start space-x-2">
                <Checkbox 
                  id="risk" 
                  checked={riskAcknowledged}
                  onCheckedChange={(checked) => setRiskAcknowledged(checked as boolean)}
                />
                <Label htmlFor="risk" className="text-sm leading-relaxed">
                  T√¥i ƒë√£ ƒë·ªçc, hi·ªÉu v√† ch·∫•p nh·∫≠n c√°c r·ªßi ro n√™u tr√™n. T√¥i x√°c nh·∫≠n r·∫±ng ƒë√¢y l√† quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞ t·ª± nguy·ªán v√† ph√π h·ª£p v·ªõi kh·∫£ nƒÉng t√†i ch√≠nh c·ªßa t√¥i.
                </Label>
              </div>
            </div>
            
            <div className="flex gap-3">
              <Button variant="outline" onClick={() => setCurrentStep('amount')} className="flex-1">
                Quay l·∫°i
              </Button>
              <Button onClick={handleRiskAcknowledgment} className="flex-1">
                X√°c nh·∫≠n & Ti·∫øp t·ª•c
              </Button>
            </div>
          </div>
        );
        
      case 'esign':
        return (
          <div className="space-y-6">
            <div className="text-center space-y-2">
              <h3 className="text-lg font-semibold">K√Ω ƒëi·ªán t·ª≠ h·ª£p ƒë·ªìng</h3>
              <p className="text-sm text-muted-foreground">
                K√Ω h·ª£p ƒë·ªìng g√≥p v·ªën ƒë·ªìng h√†nh ƒë·ªÉ ho√†n t·∫•t ƒë·∫ßu t∆∞
              </p>
            </div>
            
            {/* Legal Disclaimer */}
            <LegalDisclaimer type="esign" variant="warning" />
            
            <div className="bg-blue-50 rounded-lg p-4 space-y-3">
              <div className="flex items-center gap-2">
                <FileText className="w-5 h-5 text-blue-600" />
                <span className="font-medium">H·ª£p ƒë·ªìng g√≥p v·ªën ƒë·ªìng h√†nh</span>
              </div>
              <div className="text-sm text-muted-foreground space-y-1">
                <p>‚Ä¢ S·ªë ti·ªÅn: {formatCurrency(parseInt(investmentAmount.replace(/[^0-9]/g, '')) || 0)}</p>
                <p>‚Ä¢ D·ª± √°n: {opportunity.projectName}</p>
                <p>‚Ä¢ Doanh nghi·ªáp: {opportunity.companyName}</p>
                <p>‚Ä¢ T·ª∑ su·∫•t m·ª•c ti√™u: {opportunity.targetRate}%/nƒÉm</p>
              </div>
              
              <div className="flex gap-2">
                <Button variant="outline" size="sm">
                  <Eye className="w-4 h-4 mr-2" />
                  Xem tr∆∞·ªõc
                </Button>
                <Button variant="outline" size="sm">
                  <Download className="w-4 h-4 mr-2" />
                  T·∫£i xu·ªëng
                </Button>
              </div>
            </div>
            
            <div className="space-y-4">
              <div className="flex items-start space-x-2">
                <Checkbox 
                  id="terms" 
                  checked={termsAccepted}
                  onCheckedChange={(checked) => setTermsAccepted(checked as boolean)}
                />
                <Label htmlFor="terms" className="text-sm">
                  T√¥i ƒë√£ ƒë·ªçc, hi·ªÉu v√† ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n trong h·ª£p ƒë·ªìng g√≥p v·ªën ƒë·ªìng h√†nh
                </Label>
              </div>
            </div>
            
            <div className="flex gap-3">
              <Button variant="outline" onClick={() => setCurrentStep('risk_acknowledgment')} className="flex-1">
                Quay l·∫°i
              </Button>
              <Button 
                onClick={handleESign} 
                disabled={!termsAccepted || isProcessing}
                className="flex-1"
              >
                {isProcessing ? (
                  <>
                    <Clock className="w-4 h-4 mr-2 animate-spin" />
                    ƒêang k√Ω...
                  </>
                ) : (
                  <>
                    <Signature className="w-4 h-4 mr-2" />
                    K√Ω ƒëi·ªán t·ª≠
                  </>
                )}
              </Button>
            </div>
          </div>
        );
        
      case 'confirmation':
        return (
          <div className="space-y-6">
            <div className="text-center space-y-2">
              <CheckCircle className="w-12 h-12 text-green-600 mx-auto" />
              <h3 className="text-lg font-semibold">Ch·ªù doanh nghi·ªáp x√°c nh·∫≠n</h3>
              <p className="text-sm text-muted-foreground">
                H·ª£p ƒë·ªìng ƒë√£ ƒë∆∞·ª£c k√Ω th√†nh c√¥ng. ƒêang ch·ªù doanh nghi·ªáp x√°c nh·∫≠n ph√°t h√†nh CQƒêƒêT.
              </p>
            </div>
            
            <div className="bg-green-50 rounded-lg p-4 space-y-3">
              <div className="text-sm space-y-2">
                <div className="flex justify-between">
                  <span>M√£ giao d·ªãch:</span>
                  <span className="font-mono">{transactionId}</span>
                </div>
                <div className="flex justify-between">
                  <span>S·ªë ti·ªÅn t·∫°m gi·ªØ:</span>
                  <span className="font-semibold">{formatCurrency(parseInt(investmentAmount.replace(/[^0-9]/g, '')) || 0)}</span>
                </div>
                <div className="flex justify-between">
                  <span>Tr·∫°ng th√°i:</span>
                  <Badge variant="secondary" className="bg-yellow-100 text-yellow-800">
                    <Clock className="w-3 h-3 mr-1" />
                    Ch·ªù x√°c nh·∫≠n
                  </Badge>
                </div>
              </div>
            </div>
            
            <Alert>
              <Shield className="h-4 w-4" />
              <AlertDescription>
                S·ªë ti·ªÅn ƒë√£ ƒë∆∞·ª£c chuy·ªÉn t·ª´ "kh·∫£ d·ª•ng" sang "t·∫°m gi·ªØ". Doanh nghi·ªáp c√≥ 48h ƒë·ªÉ x√°c nh·∫≠n ph√°t h√†nh CQƒêƒêT.
              </AlertDescription>
            </Alert>
            
            <Button onClick={handleFinalConfirmation} className="w-full" disabled={isProcessing}>
              {isProcessing ? (
                <>
                  <Clock className="w-4 h-4 mr-2 animate-spin" />
                  ƒêang x·ª≠ l√Ω...
                </>
              ) : (
                'M√¥ ph·ªèng x√°c nh·∫≠n DN'
              )}
            </Button>
          </div>
        );
        
      case 'completed':
        return (
          <div className="space-y-6">
            <div className="text-center space-y-4">
              <CheckCircle className="w-16 h-16 text-green-600 mx-auto" />
              <h3 className="text-xl font-bold text-green-600">ƒê·∫ßu t∆∞ th√†nh c√¥ng!</h3>
              <p className="text-muted-foreground">
                CQƒêƒêT ƒë√£ ƒë∆∞·ª£c c·∫•p v√† ghi nh·∫≠n v√†o s·ªï c·ªßa b·∫°n
              </p>
            </div>
            
            <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-6 space-y-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600 mb-2">{cqidNumber}</div>
                <QrCode className="w-12 h-12 mx-auto text-gray-600" />
                <p className="text-sm text-muted-foreground mt-2">M√£ QR x√°c th·ª±c blockchain</p>
              </div>
              
              <Separator />
              
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>S·ªë ti·ªÅn ƒë·∫ßu t∆∞:</span>
                  <span className="font-semibold">{formatCurrency(parseInt(investmentAmount.replace(/[^0-9]/g, '')) || 0)}</span>
                </div>
                <div className="flex justify-between">
                  <span>D·ª± √°n:</span>
                  <span className="font-medium">{opportunity.projectName}</span>
                </div>
                <div className="flex justify-between">
                  <span>Ng√†y c·∫•p:</span>
                  <span>{new Date().toLocaleDateString('vi-VN')}</span>
                </div>
              </div>
            </div>
            
            <div className="flex gap-3">
              <Button variant="outline" className="flex-1">
                <FileText className="w-4 h-4 mr-2" />
                T·∫£i ch·ª©ng t·ª´
              </Button>
              <Button onClick={() => {
                resetFlow();
                onClose();
                // Trigger navigation to portfolio tab
                window.dispatchEvent(new CustomEvent('navigate-to-portfolio'));
              }} className="flex-1">
                Xem s·ªï c·ªßa t√¥i
              </Button>
            </div>
          </div>
        );
        
      default:
        return null;
    }
  };

  // Show InvestmentSuccessScreen if investment is completed
  if (showSuccessScreen) {
    const investmentData = {
      packageName: opportunity.projectName,
      businessName: opportunity.companyName,
      cqidNumber: cqidNumber,
      investmentAmount: parseInt(investmentAmount.replace(/[^0-9]/g, '')) || 0,
      effectiveDate: new Date().toLocaleDateString('vi-VN'),
      contractHash: `0x${Math.random().toString(16).substr(2, 8)}`,
      qrCodeUrl: `/qr/${cqidNumber}`,
      targetReturn: opportunity.targetRate,
      term: opportunity.duration,
      distributionSchedule: 'H√†ng qu√Ω'
    };

    return (
      <InvestmentSuccessScreen
        investmentData={investmentData}
        onViewPortfolio={() => {
          resetFlow();
          // Navigate to portfolio page
          window.location.href = '/portfolio';
        }}
        onClose={() => {
          setShowSuccessScreen(false);
          resetFlow();
        }}
      />
    );
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Building2 className="w-5 h-5" />
            Lu·ªìng ƒë·∫ßu t∆∞ - {opportunity.projectName}
          </DialogTitle>
          <DialogDescription>
            Ho√†n t·∫•t c√°c b∆∞·ªõc ƒë·ªÉ g√≥p v·ªën ƒë·ªìng h√†nh v√†o d·ª± √°n
          </DialogDescription>
        </DialogHeader>
        
        {/* Progress Bar */}
        <div className="space-y-2">
          <div className="flex justify-between text-sm text-muted-foreground">
            <span>Ti·∫øn ƒë·ªô</span>
            <span>{Math.round(getStepProgress())}%</span>
          </div>
          <Progress value={getStepProgress()} className="h-2" />
        </div>
        
        {/* Project Summary */}
        <Card className="bg-gray-50">
          <CardContent className="p-4">
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-muted-foreground">Doanh nghi·ªáp:</span>
                <p className="font-medium">{opportunity.companyName}</p>
              </div>
              <div>
                <span className="text-muted-foreground">T·ª∑ su·∫•t m·ª•c ti√™u:</span>
                <p className="font-semibold text-golden">{opportunity.targetRate}%/nƒÉm</p>
              </div>
              <div>
                <span className="text-muted-foreground">K·ª≥ h·∫°n:</span>
                <p className="font-medium">{opportunity.duration}</p>
              </div>
              <div>
                <span className="text-muted-foreground">ƒêi·ªÉm Uy t√≠n:</span>
                    <UyTinBadge score={opportunity.uyTinScore} size="sm" />
              </div>
            </div>
          </CardContent>
        </Card>
        
        {/* Step Content */}
        <div className="py-4">
          {renderStepContent()}
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default InvestmentFlow;